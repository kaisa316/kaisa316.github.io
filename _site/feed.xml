<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-09-29T17:30:54+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2018/09/29/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2018-09-29T14:48:53+08:00</published><updated>2018-09-29T14:48:53+08:00</updated><id>http://localhost:4000/jekyll/update/2018/09/29/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2018/09/29/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">Git Study</title><link href="http://localhost:4000/2018/09/29/git-study.html" rel="alternate" type="text/html" title="Git Study" /><published>2018-09-29T00:00:00+08:00</published><updated>2018-09-29T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/29/git-study</id><content type="html" xml:base="http://localhost:4000/2018/09/29/git-study.html">&lt;h3 id=&quot;参考资料整理&quot;&gt;参考资料整理&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;图形直观的：http://ndpsoftware.com/git-cheatsheet.html&lt;/li&gt;
  &lt;li&gt;官方doc：https://git-scm.com/doc
    &lt;ul&gt;
      &lt;li&gt;里面有很多参考资料的连接&lt;/li&gt;
      &lt;li&gt;图形：http://justinhileman.info/article/git-pretty/git-pretty.png&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;国内博客https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000&lt;/li&gt;
  &lt;li&gt;官方book： https://git-scm.com/book/zh/v2&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;重点内容&quot;&gt;重点内容&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;帮助  &lt;code class=&quot;highlighter-rouge&quot;&gt;git log --help&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;git help log&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-config&quot;&gt;配置git&lt;/a&gt; : &lt;code class=&quot;highlighter-rouge&quot;&gt;git config&lt;/code&gt;,按照影响范围分三层
    &lt;ul&gt;
      &lt;li&gt;system层，针对所有用户配置。例如&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --system log.date iso&lt;/code&gt;，可在/etc/gitconfig中看到&lt;/li&gt;
      &lt;li&gt;global层，针对当前用户。&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global log.date iso&lt;/code&gt;，可在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt;中看到与改写&lt;/li&gt;
      &lt;li&gt;local层,default ，针对当前repository。&lt;code class=&quot;highlighter-rouge&quot;&gt;git config  log.date iso&lt;/code&gt; ，可在当前资源库的&lt;code class=&quot;highlighter-rouge&quot;&gt;.git/config&lt;/code&gt;看到与改写&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;分支的创建与合并
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%9A%84%E6%96%B0%E5%BB%BA%E4%B8%8E%E5%90%88%E5%B9%B6&quot;&gt;官方简单而清晰的demo例子&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch test&lt;/code&gt; 创建test分支&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -b test&lt;/code&gt; 创建test分支并切换到此分支`&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout test&lt;/code&gt;切换分支到test&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git branch --list&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch &lt;/code&gt; 列出所有分支&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;合并
    &lt;ul&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge hot_fix&lt;/code&gt;，将hot_fix分支合并到当前分支&lt;/li&gt;
      &lt;li&gt;有冲突时，运用工具软件合并  Use vimdiff as git mergetool - Ruslan Osipov&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Log 日志
    &lt;ul&gt;
      &lt;li&gt;https://git-scm.com/docs/git-log/1.7.12.2&lt;/li&gt;
      &lt;li&gt;https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2&lt;/li&gt;
      &lt;li&gt;最新 的几次log 提交
        &lt;ul&gt;
          &lt;li&gt;log 本身就是按照从新至旧的顺序展示的。限制条数可以直接-3，就是显示最近3条&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;怎么按照某人+时间段查询
        &lt;ul&gt;
          &lt;li&gt;按照作者+时间段查询 ： &lt;code class=&quot;highlighter-rouge&quot;&gt;git log --author='kaisa316' --since='2018-08-15 00:00:00' --until='2018--9-26'&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;显示log中的文件： &lt;code class=&quot;highlighter-rouge&quot;&gt;git log --name-only&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;git log  name-status&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;merge 之后，log中没有显示文件了。可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;参数解决&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;时间格式怎么本地化
        &lt;ul&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log.date --global iso&lt;/code&gt; ,格式类似&lt;code class=&quot;highlighter-rouge&quot;&gt; Date: 2018-01-07 22:03:43 -0500&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git config --global log.date format:'%Y-%m-%d %H:%M:%S'&lt;/code&gt;&lt;/li&gt;
          &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log --date=format:'%Y-%m-%d %H:%M:%S'&lt;/code&gt;&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;–stat 统计&lt;/li&gt;
      &lt;li&gt;-Syy 仅显示添加或删除yy关键字的记录&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;回撤（恢复到历史某个版本）
    - &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout -- xxx.php&lt;/code&gt;, 本地修改了，但还没有放到index暂存区，用checkout
    - &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset commit_id&lt;/code&gt; ，workspace 本地中的文件不会被更新,index会被更新。
    - &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset --hard commit_id &lt;/code&gt;, workspace 和index都会被更新成commit_id的内容&lt;/li&gt;
  &lt;li&gt;diff ，文件不同对比
    &lt;ul&gt;
      &lt;li&gt;默认&lt;code class=&quot;highlighter-rouge&quot;&gt;git diff&lt;/code&gt;是有个简单的文本比较，但不太方便。&lt;/li&gt;
      &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git  difftool&lt;/code&gt;，这个可以使用vimdiff，推荐。可以通过使用别名，git config –global alias.df difftool进行简化.&lt;/li&gt;
      &lt;li&gt;diff可以指定commit号进行比较, for example:&lt;code class=&quot;highlighter-rouge&quot;&gt;git df 111b9d9 d112da3 .vimrc&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;Difference between git HEAD and the current project state? - Stack Overflow&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;暂存(stash)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%E4%B8%8E%E6%B8%85%E7%90%86&quot;&gt;官方说明，清晰明了&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013758404317281e54b6f5375640abbb11e67be4cd49e0000&quot;&gt;忽略特殊文件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;远程支持&quot;&gt;远程支持&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;create a new repository on the command line&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;echo “# lumen_demo” » README.md
git init
git add README.md
git commit -m “first commit”
git remote add origin https://github.com/kaisa316/lumen_demo.git
git push -u origin master&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;push an existing repository from the command line
git remote add origin https://github.com/kaisa316/lumen_demo.git
git push -u origin master&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">参考资料整理 图形直观的：http://ndpsoftware.com/git-cheatsheet.html 官方doc：https://git-scm.com/doc 里面有很多参考资料的连接 图形：http://justinhileman.info/article/git-pretty/git-pretty.png 国内博客https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/00137402760310626208b4f695940a49e5348b689d095fc000 官方book： https://git-scm.com/book/zh/v2</summary></entry><entry><title type="html">Hello World</title><link href="http://localhost:4000/2018/09/29/hello-world.html" rel="alternate" type="text/html" title="Hello World" /><published>2018-09-29T00:00:00+08:00</published><updated>2018-09-29T00:00:00+08:00</updated><id>http://localhost:4000/2018/09/29/hello-world</id><content type="html" xml:base="http://localhost:4000/2018/09/29/hello-world.html">&lt;h2 id=&quot;helloamy&quot;&gt;hello,amy!&lt;/h2&gt;</content><author><name></name></author><summary type="html">hello,amy!</summary></entry></feed>